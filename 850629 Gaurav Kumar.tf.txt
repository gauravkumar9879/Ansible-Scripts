Create a template for running a simple two-tier architecture on Amazon Web services. The premise is that you have stateless app servers running behind an ELB serving traffic.

# variables(aws_access_key,aws_secret_key,aws_region) are declared in variables.tf file
 
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "aws_region" 
variable "aws_elb.bar.id"{}
variable "aws_instance.foo.id"{}
{
default = "ap-south-1"
}



# This is the main file containg the provider and the resources which we need

provider "aws" {
access_key = "${var.aws_access_key}"
secret_key = "${var.aws_secret_key}"
region = “${var.aws_region}”
}




resource "vpc_id" {}

data "aws_vpc" "selected" {
  id = "${var.vpc_id}"
}


resource "aws_subnet" "example" {
  vpc_id            = "${data.aws_vpc.selected.id}"
  availability_zone = "us-west-2a"
  cidr_block        = "${cidrsubnet(data.aws_vpc.selected.cidr_block, 4, 1)}"
}

resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.main.id}"

  tags = {
    Name = "main"
  }
}


resource "aws_instance" "my_resource" {
ami = "ami-b374d5a5"
instance_type = "t2.micro"
}

resource "aws_elb_attachment" "elb_count" {
 elb = "${aws_elb.bar.id}"
 instance = "${aws_instance.foo.id}"
}

#this will define the way we connect

connection{
type = "ssh"
user = "ec2_user"
private_key= "${file("   ")}

#provisioner

resource "aws_instance" "web" {

  provisioner "remote-exec" {
    inline = [
      "puppet apply",
      "consul join ${aws_instance.web.private_ip}",
    ]
  }
}


resource "aws_vpn" "test_vpn"{
  <attribute> =<value>
}

data "aws_instance" "gaurav_web_server" {
  instance_id = "i-instanceid"

  filter {
    name   = "image-id"
    values = ["ami-0a74bfeb64gf"]
  }